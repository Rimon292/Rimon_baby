
const { GoatWrapper } = require('fca-liane-utils');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

module.exports = {
  config: {
    name: "owner",
    aliases: ["info"],
    author: "flame x",
    role: 0,
    shortDescription: "Show Owner Information",
    longDescription: "Displays detailed information about the bot owner.",
    category: "info",
    guide: "{pn}"
  },

  onStart: async function ({ api, event }) {
    try {
      const ownerInfo = {
        name: 'YoUr RiMOn‚ù§Ô∏è‚Äçü©π',
        class: 'ùë∫ùë∫ùë™ ùë™ùë®ùëµùë´ùë∞ùë´ùë®ùëªùë¨',
        group: 'ùë∫ùë™ùë∞ùë¨ùëµùë™ùë¨',
        gender: 'ùë¥ùë®ùë≥ùë¨',
        Birthday: 'ùüê0-ùüé8-ùüêùüéùüéùüñ',
        religion: 'ùë∞ùë∫ùë≥ùë®ùë¥',
        hobby: 'nothing',
        Fb: 'https://www.facebook.com/it.z.rimon.216225',
        Relationship: 'ùë®ùë≥ùëæùë®ùíÄùë∫ ùë©ùë¨ ùë∫ùë∞ùëµùëÆùë≥ùë¨',
        Height: '6'
      };

      const videoUrl = 'https://i.imgur.com/CNpkoYi.mp4';
      const tmpFolderPath = path.join(__dirname, 'tmp');
      if (!fs.existsSync(tmpFolderPath)) {
        fs.mkdirSync(tmpFolderPath);
      }

      const videoPath = path.join(tmpFolderPath, 'owner_video.mp4');
      const response = await axios({
        url: videoUrl,
        method: "GET",
        responseType: "stream",
        headers: { 'User-Agent': 'Mozilla/5.0' }
      });

      const writer = fs.createWriteStream(videoPath);
      response.data.pipe(writer);

      writer.on("finish", async () => {
        const messageBody = `
ìÄ¨ ùêéùêñùêçùêÑùêë ùêàùêçùêÖùêé ìÄ¨

~ùôâùòºùôàùôÄ: ${ownerInfo.name}
~ùòæùôáùòºùôéùôé: ${ownerInfo.class}
~ùôÇùôçùôäùôêùôã: ${ownerInfo.group}
~ùôÇùôÄùôâùòøùôÄùôç: ${ownerInfo.gender}
~ùòΩùôÑùôçùôèùôÉùòøùòºùôî: ${ownerInfo.Birthday}
~ùôçùôÄùôáùôÑùôÇùôÑùôäùôâ: ${ownerInfo.religion}
~ùôçùôÄùôáùòºùôèùôÑùôäùôâùôéùôÉùôÑùôã: ${ownerInfo.Relationship}
~ùôÉùôäùòΩùòΩùôî: ${ownerInfo.hobby}
~ùôÉùôÄùôÑùôÇùôÉùôè: ${ownerInfo.Height}
~ùôÅùòΩ: ${ownerInfo.Fb}
        `;

        await api.sendMessage({
          body: messageBody,
          attachment: fs.createReadStream(videoPath)
        }, event.threadID, () => {
          fs.unlinkSync(videoPath);
        }, event.messageID);

        api.setMessageReaction('üíÄ', event.messageID, () => {}, true);
      });

      writer.on("error", () => {
        api.sendMessage("‚ùå | Failed to download video.", event.threadID, event.messageID);
      });
    } catch (error) {
      console.error('Error in ownerinfo command:', error);
      return api.sendMessage('‚ö†Ô∏è An error occurred while processing the command.', event.threadID);
    }
  }
};

const wrapper = new GoatWrapper(module.exports);
wrapper.applyNoPrefix();
